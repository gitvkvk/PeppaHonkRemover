
#this program loops through samples of Peppa pig honking and extracts characteristic data 
#this data is exported to json, to then be fed into a machine learning program to teach it to detect honking audio events

#still need to split samples into regular lengths and include non honking samples in the dataset

import os
import librosa
import json



dataset_path = r"C:\Users\kvk19\Projects\PeppaHonkRemover\HonkSamples"
json_path = r"C:\Users\kvk19\Projects\PeppaHonkRemover\ProcessedSamples.json"


SAMPLE_RATE = 22050
n_fft = 2048
n_mfcc = 13
hop_length = 512


for i, (roots, dirs, files) in enumerate(os.walk(dataset_path)):
    #print (i)
    #print (roots)
    #print (dirs)
    #print (files)
    
    data = {
        "mfcc" : [],
        "labels" : []
        }

    for file in files:
        #print ("file = %s" % file)
        file_path = os.path.join(dataset_path, file)
        #print(file_path)

        signal, sr = librosa.load(file_path, sr= SAMPLE_RATE) # load the file
        #print(signal, sr)

        mfcc = librosa.feature.mfcc(y = signal, sr = sr, n_fft= n_fft, n_mfcc = n_mfcc, hop_length=hop_length)
        #print(mfcc)
        mfcc = mfcc.T
        print(type(mfcc))
        print(type(mfcc.tolist())) # error from missing the () at the end of tolist method, making it an object in memory rather than a list

            #check segment for correct length (therefore equal number of MFCCs)

        data["mfcc"].append(mfcc.tolist()) #cast numpy array to a list

#the casting to list, saves it as a built in method object in the dictionary. This is not dumpable to json

        data["labels"].append(i) 
        #print(type(data))
        print(data)

        with open(json_path, "w") as fp:
            json.dump(data, fp, indent = None)
        
