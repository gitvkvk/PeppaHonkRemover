import os
import librosa
import json
import math


dataset_path = r"C:\Users\kvk19\Projects\PeppaHonkRemover\SampleCopy"
json_path = r"C:\Users\kvk19\Projects\PeppaHonkRemover\ProcessedSamples2.json"

SAMPLE_RATE = 44100 
DURATION = 0.027
SAMPLES_PER_HONKSAMPLE = SAMPLE_RATE * DURATION

n_fft = 2048
n_mfcc = 13
hop_length = 512


def save_mfcc(dataset_path, json_path, n_mfcc = 13, n_fft = 2048, hop_length = 512, num_segments = 5 ):

    samples_per_segment = int(SAMPLES_PER_HONKSAMPLE / num_segments)
    num_mfcc_vectors_per_segment = math.ceil(samples_per_segment / hop_length)
    data = {
        "mapping" : [],
        "mfcc" : [],
        "labels" : []
        }

    for i, (roots, dirs, files) in enumerate(os.walk(dataset_path)):
        #print (i)
        #print (roots)
        #print (dirs)
        #print (files)

        if roots is not dataset_path:
            roots_components = roots.split("\\")
            semantic_label = roots_components[-1]
            data["mapping"].append(semantic_label)
            print("\nProcessessing {}".format(semantic_label))
            print(data)
            print("\n")

            for file in files:
                print ("file = %s" % file)
                file_path = os.path.join(roots, file)
                print(file_path)

                print("\n")

                signal, sr = librosa.load(file_path , sr= SAMPLE_RATE) # load the file
                print(signal, sr)

                mfcc = librosa.feature.mfcc(y = signal, sr = sr, n_fft= n_fft, n_mfcc = n_mfcc, hop_length=hop_length)
                #print(mfcc)
                mfcc = mfcc.T
                print(type(mfcc))
                print(type(mfcc.tolist())) # error from missing the () at the end of tolist method, making it an object in memory rather than a list

                    #check segment for correct length (therefore equal number of MFCCs)

                data["mfcc"].append(mfcc.tolist()) #cast numpy array to a list

        #the casting to list, saves it as a built in method object in the dictionary. This is not dumpable to json

                data["labels"].append(i) 
                #print(type(data))
                print(data)

                with open(json_path, "w") as fp:
                    json.dump(data, fp, indent = None)
                

if __name__ == "__main__":
    save_mfcc(dataset_path, json_path)